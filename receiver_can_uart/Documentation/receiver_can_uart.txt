=============================================================================
List of generated methods in project: receiver_can_uart

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "KSDK1"     (component KinetisSDK)

Module "CS2"       (component CriticalSection)
   - CS2_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS2_EnterCritical -Enters a critical section
   - CS2_ExitCritical -Exits a critical section

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "GREENLED"  (component BitIO_LDD)
   - GREENLED_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - GREENLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - GREENLED_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - GREENLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - GREENLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - GREENLED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission or 
                method GetSentDataNum to check the state of sending.

Module "CAN1"      (component CAN_LDD)
   - CAN1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - CAN1_SetRxBufferID -Sets the ID of the receive message buffer specified by the parameter BufferIdx.
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.

Module "CAN_RxBuff" (component RingBuffer)
   - CAN_RxBuff_Clear -Clear (empty) the ring buffer.
   - CAN_RxBuff_Put -Puts a new element into the buffer
   - CAN_RxBuff_Putn -Put a number new element into the buffer.
   - CAN_RxBuff_Get -Removes an element from the buffer
   - CAN_RxBuff_Peek -Returns an element of the buffer without removiing it.
   - CAN_RxBuff_Compare -Compares the elements in the buffer.
   - CAN_RxBuff_Delete -Removes an element from the buffer
   - CAN_RxBuff_NofElements -Returns the actual number of elements in the buffer.
   - CAN_RxBuff_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - CAN_RxBuff_Deinit -Driver de-initialization
   - CAN_RxBuff_Init -Initializes the data structure

Module "Cpu"       (component MK70FN1M0MJ15)

===================================================================================
